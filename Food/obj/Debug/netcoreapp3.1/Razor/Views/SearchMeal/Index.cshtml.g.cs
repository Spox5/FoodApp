#pragma checksum "C:\Mati\FoodApp\Food\Views\SearchMeal\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "aecbe71af3a68b1bbbf96249f431df484838b42f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_SearchMeal_Index), @"mvc.1.0.view", @"/Views/SearchMeal/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aecbe71af3a68b1bbbf96249f431df484838b42f", @"/Views/SearchMeal/Index.cshtml")]
    public class Views_SearchMeal_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Food.Data.Models.Ingredient>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<div class=\"search-meal-container\" data-ingredients=\'");
#nullable restore
#line 3 "C:\Mati\FoodApp\Food\Views\SearchMeal\Index.cshtml"
                                                Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
#nullable disable
            WriteLiteral("\'>\r\n\r\n    <div>Co masz w lod√≥wce?</div>\r\n\r\n    <div class=\"ingredients\">\r\n\r\n");
#nullable restore
#line 9 "C:\Mati\FoodApp\Food\Views\SearchMeal\Index.cshtml"
         foreach (var ingredient in Model)
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <div>\r\n                <input");
            BeginWriteAttribute("value", " value=\"", 308, "\"", 330, 1);
#nullable restore
#line 12 "C:\Mati\FoodApp\Food\Views\SearchMeal\Index.cshtml"
WriteAttributeValue("", 316, ingredient.Id, 316, 14, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" type=\"checkbox\"> ");
#nullable restore
#line 12 "C:\Mati\FoodApp\Food\Views\SearchMeal\Index.cshtml"
                                                          Write(ingredient.Name);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            </div>\r\n");
#nullable restore
#line 14 "C:\Mati\FoodApp\Food\Views\SearchMeal\Index.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        <button class=""search-button"" type=""button"">Wyszukaj</button>

    </div>

    <div class=""meal-result-container""></div>

</div>


<script>
    const searchButton = document.querySelector('.search-button');
    const ingredientsContainer = document.querySelector('.ingredients');
    const mealResultContainer = document.querySelector('.meal-result-container');
    const ingredientsData = JSON.parse(document.querySelector('.search-meal-container').dataset.ingredients)

    bindEvents()

    function bindEvents() {
        searchButton.onclick = () => {
            const ingredients = Array.from(ingredientsContainer.querySelectorAll('input'));
            const selectedIngredients = ingredients
                .filter(ingredient => ingredient.checked)
                .map(ingredient => parseInt(ingredient.value))

            mealResultContainer.innerHTML = """"
            getMealsByIngredients(selectedIngredients)
        }
    }

    function displayMealResult(meals) {
  ");
            WriteLiteral(@"      for (const meal of meals) {

            const mealElement = document.createElement('div');
            mealElement.innerHTML = `${meal.name}. Skladniki: ${getMealIngredients(meal)}`;
            mealResultContainer.appendChild(mealElement);
        }
    }

    function getMealsByIngredients(selectedIngredients) {
        const requestData = {
            ingredientIds: selectedIngredients
        }

        fetch(""/SearchMeal/Search"", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        })
            .then(response => response.json())
            .then(displayMealResult);
    }

    function getMealIngredients(meal) {
        const ingredients = meal.mealIngredients.map(mi => getIngredientNameById(mi.ingredientId))

        return ingredients.toString()
    }

    function getIngredientNameById(id) {
        return ingredientsData.find(ingredient => in");
            WriteLiteral("gredient.id === id).name\r\n    }\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Food.Data.Models.Ingredient>> Html { get; private set; }
    }
}
#pragma warning restore 1591
