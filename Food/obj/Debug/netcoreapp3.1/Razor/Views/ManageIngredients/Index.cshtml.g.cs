#pragma checksum "C:\Users\mateu\source\repos\Food\Food\Views\ManageIngredients\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dfac4e2c1047cb8118a5854d9983ad464dfefe0b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ManageIngredients_Index), @"mvc.1.0.view", @"/Views/ManageIngredients/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dfac4e2c1047cb8118a5854d9983ad464dfefe0b", @"/Views/ManageIngredients/Index.cshtml")]
    public class Views_ManageIngredients_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Food.Data.Models.Ingredient>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Users\mateu\source\repos\Food\Food\Views\ManageIngredients\Index.cshtml"
   Layout = "~/Views/Shared/_Layout.cshtml"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"main\">\r\n\r\n    <div class=\"title\">Twoje składniki:</div>\r\n\r\n    <form>\r\n\r\n");
#nullable restore
#line 11 "C:\Users\mateu\source\repos\Food\Food\Views\ManageIngredients\Index.cshtml"
         foreach (var ingredient in Model)
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <label class=\"btn btn-outline-primary\">\r\n                <input class=\"ingredient-input\" name=\"ingredient\"");
            BeginWriteAttribute("value", " value=\"", 359, "\"", 381, 1);
#nullable restore
#line 14 "C:\Users\mateu\source\repos\Food\Food\Views\ManageIngredients\Index.cshtml"
WriteAttributeValue("", 367, ingredient.Id, 367, 14, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" type=\"radio\" required> ");
#nullable restore
#line 14 "C:\Users\mateu\source\repos\Food\Food\Views\ManageIngredients\Index.cshtml"
                                                                                                           Write(ingredient.Name);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            </label>\r\n");
#nullable restore
#line 16 "C:\Users\mateu\source\repos\Food\Food\Views\ManageIngredients\Index.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        <div>\r\n");
            WriteLiteral("            <input class=\"delete-button btn btn-outline-warning m-2\" type=\"button\" value=\"Usuń składnik\">\r\n        </div>\r\n\r\n        <div class=\"ingredient-name-form\">\r\n");
            WriteLiteral(@"            <input class=""save-button"" type=""button"" value=""Zapisz"">
        </div>

    </form>

    <div class=""title"">Dodaj nowy składnik do Twojej bazy</div>


    <form>

        <div>

            <input type=""text"" class=""input-field form-control"" placeholder=""Nazwa nowego składnika"" required>
            <input class=""add-button btn btn-outline-success m-2"" type=""button"" value=""Dodaj składnik"">

        </div>

    </form>

</div>

<script>

    const addButton = document.querySelector('.add-button');
    const addIngredientName = document.querySelector('.input-field');
    const deleteButton = document.querySelector('.delete-button');
    const updateButton = document.querySelector('.update-button');
    const editInput = document.querySelector('.ingredient-name-input');
    const editForm = document.querySelector('.ingredient-name-form');
    const saveButton = document.querySelector('.save-button');

    hideEditForm();
    bindEvents();

    function bindEvents() ");
            WriteLiteral(@"{
        addButton.onclick = addIngredient
        updateButton.onclick = displayEditForm
        saveButton.onclick = updateIngredient
        deleteButton.onclick = deleteIngredient
    }

    function addIngredient() {
        var ingredient = {
            //tu działa parser małe litery pierwsze na wielkie
            name: addIngredientName.value,
            //userId: parseInt(window.sessionStorage.getItem(""userId""))
            userId: 1
        };

        fetch(""/ManageIngredients/AddIngredient"", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(ingredient)

        })

        setTimeout(function () {
            window.location.reload();
        }, 500); 

    }

    function updateIngredient() {
        hideEditForm()
        const selectedIngredient = Array.from(document.querySelectorAll('.ingredient-input')).find(ingredient => ingredient.checked);

        cons");
            WriteLiteral(@"t ingredient = {
            id: parseInt(selectedIngredient.value),
            Name: editInput.value,
            //userId: parseInt(window.sessionStorage.getItem(""userId"")),
            userId: 1
        }

        fetch('/ManageIngredients/UpdateIngredient', {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(ingredient)
        })

        setTimeout(function () {
            window.location.reload();
        }, 500); 
    }

    function deleteIngredient() {
        const selectedIngredient = Array.from(document.querySelectorAll('.ingredient-input')).find(ingredient => ingredient.checked);

        const ingredient = {
            id: parseInt(selectedIngredient.value),
            name: 'daa',
            //userId: parseInt(window.sessionStorage.getItem(""userId""))
            userId: 1
        }

        fetch('/ManageIngredients/DeleteIngredient', {
            method: 'D");
            WriteLiteral(@"ELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(ingredient)
        })

        setTimeout(function () {
            window.location.reload();
        }, 500); 
    }

    function displayEditForm() {
        editForm.style.display = 'block'
    }


    function hideEditForm() {
        editForm.style.display = 'none'
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Food.Data.Models.Ingredient>> Html { get; private set; }
    }
}
#pragma warning restore 1591
