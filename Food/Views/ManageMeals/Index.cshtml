@model Food.ViewModel.ManageMealViewModel


@{ Layout = "~/Views/Shared/_Layout.cshtml"; }


<div class="main manage-meals-container" data-ingredients='@Html.Raw(Json.Serialize(Model.Ingredients))'>

    <div class="title">Dodane przez Ciebie posiłki:</div>


    <div class="meals-other m-3">
        @foreach (var meal in Model.Meals)
        {
            if (meal.CategoryId == 6)
            {
                <label class="btn btn-outline-primary">
                    <input class="meal-input" name="meal"  value="@meal.Id" type="radio"> @meal.Name
                </label>
            }

        }
    </div>

    <div class="meal-name-form">

            <div class="m-3">
                <small class="form-text text-muted mb-1">Podaj nową nazwę posiłku.</small>
                <input class="meal-name-input form-control w-50 mx-auto" placeholder="Nowa nazwa posiłku">

            </div>
        

            <div class="m-3">
                <small class="form-text text-muted mb-1">Skoryguj przepis.</small>
                <textarea class="meal-recipe-input form-control w-50 mx-auto" placeholder="Nowy przepis"></textarea>
            </div>

        <input class="save-button btn btn-outline-primary m-2" type="button" value="Zapisz">
    </div>

    <div>
        <input class="edit-button btn btn-outline-warning m-2" type="button" value="Edytuj">
        <input class="delete-button btn btn-outline-danger m-2" type="button" value="Usuń">
    </div>


    <div class="ingredients border-dark border-top m-4 pt-4">

        <div class="title">Stwórz nowy posiłek</div>

        <div class="m-4">
            <small class="form-text text-muted mb-1">Wpisz nazwę dla nowego posiłku.</small>
            <input class="input-field form-control w-50 mx-auto m-2" placeholder="Nazwa nowego posiłku">
        </div>

        <div>
            <small class="form-text text-muted mb-1">Wybierz składniki dla nowego posiłku spośród poszczególnych kategorii.</small>
            @foreach (var category in Model.Ingredients.GroupBy(ingredient => ingredient.CategoryId))
            {
                <div class="m-3">

                    <button class="but but-ingredient-family">@Model.IngredientCategories.FirstOrDefault(ic => ic.Id == category.Key)?.Name</button>

                    <div class="m-2">
                        @foreach (var ingredient in category.ToList())
                        {
                            <label class="btn btn-outline-primary">
                                @ingredient.Name <input value="@ingredient.Id" type="checkbox">
                            </label>
                        }
                    </div>

                </div>
            }
        </div>

        @if (!Model.Ingredients.Any(ingredient => ingredient.CategoryId == 9)) //warunek do zmiany
        {
            <div class="m-3">

                <button class="but but-ingredient-family">@Model.IngredientCategories.FirstOrDefault(ic => ic.Id == 9).Name</button>

                <div class="m-2">
                </div>

            </div>
        }

        <div class="m-4">
            <small class="form-text text-muted mb-1">Wpisz przepis dla nowego posiłku nie używając klawisza Enter.</small>
            <textarea class="input-meal-recipe-field form-control w-50 mx-auto m-2" rows="5" placeholder="Przepis na nowy posiłek"></textarea>
        </div>

        <button class="add-button btn btn-outline-success" type="button">Dodaj</button>

    </div>

</div>


<script>
    const mealsOther = document.querySelector('.meals-other');

    const allIngredientsCategoriesButtons = document.querySelectorAll('.but-ingredient-family');
    const divShowIngredientsOther = Array.from(allIngredientsCategoriesButtons).find(button => button.textContent == 'Uzytkownika').nextSibling.nextSibling

    const ingredientsData = JSON.parse(document.querySelector('.manage-meals-container').dataset.ingredients)

    const ingredientsContainer = document.querySelector('.ingredients')
    const addButton = document.querySelector('.add-button')
    const addMealName = document.querySelector('.input-field')
    const addMealRecipe = document.querySelector('.input-meal-recipe-field')
    const editButton = document.querySelector('.edit-button')
    const deleteButton = document.querySelector('.delete-button')
    const editInput = document.querySelector('.meal-name-input')
    const editInputRecipe = document.querySelector('.meal-recipe-input')
    const editForm = document.querySelector('.meal-name-form')
    const saveButton = document.querySelector('.save-button')

    editForm.style.display = 'none'
    bindEvents();


    function bindEvents() {
        addButton.onclick = addMeal
        editButton.onclick = displayOrHideEditForm
        saveButton.onclick = updateMeal
        deleteButton.onclick = deleteMeal

        displayMessegeIfDivIsEmpty(mealsOther, "Brak własnych posiłków");
        hideButtonsIfDivIsEmpty(mealsOther, deleteButton, editButton);

        displayMessegeIfDivIsEmpty(divShowIngredientsOther, "Brak własnych składników");

        for (const button of allIngredientsCategoriesButtons) {
            button.nextSibling.nextSibling.style.display = 'none'
            displayIngredientsGroupAfterClick(button, button.nextSibling.nextSibling)
        }

    }

    function displayMessegeIfDivIsEmpty(checkedDiv, message) {
        if (!$(checkedDiv).children().length > 0) {
            checkedDiv.innerHTML = message;
        }
    }

    function hideButtonsIfDivIsEmpty(checkedDiv, deleteButton, editButton) {
        if (!$(checkedDiv).children().length > 0) {
            deleteButton.style.display = 'none';
            editButton.style.display = 'none';
        }
    }

    function displayIngredientsGroupAfterClick(button, divOfIngredients) {

        button.onclick = () => {
            if (divOfIngredients.style.display == 'none') {
                divOfIngredients.style.display = 'block';
            }
            else if (divOfIngredients.style.display == 'block') {
                divOfIngredients.style.display = 'none'
            }
        }
    }

    function addMeal() {
        const ingredients = Array.from(ingredientsContainer.querySelectorAll('.ingredients-checkboxes'));
        const selectedIngredients = ingredients
            .filter(ingredient => ingredient.checked)
            .map(ingredient => parseInt(ingredient.value))
        const meal = {
            name: addMealName.value,
            categoryId: 6,
            userId: parseInt(window.localStorage.getItem("userId")),
            recipe: addMealRecipe.value,
            mealIngredients: selectedIngredients.map(ingredient => ({ ingredientId: ingredient }))
        }

        fetch("/ManageMeals/Add", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(meal)
        })

        setTimeout(function () {
            window.location.reload();
        }, 500); 

    }


    function updateMeal() {

        const selectedMeal = Array.from(document.querySelectorAll('.meal-input')).find(meal => meal.checked)

        const meal = {
            Id: parseInt(selectedMeal.value),
            Name: editInput.value,
            Recipe: editInputRecipe.value,
            //userId: parseInt(window.sessionStorage.getItem("userId")),
            userId: 1
        }

        fetch("/ManageMeals/Update", {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(meal)
        })

        setTimeout(function () {
            window.location.reload();
        }, 500); 
    }


    function deleteMeal() {
        const selectedMeal = Array.from(document.querySelectorAll('.meal-input')).find(meal => meal.checked)

        const meal = {
            id: parseInt(selectedMeal.value),
            name: 'fds',
            userId: 1
        }

        fetch("/ManageMeals/Delete", {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(meal)
        })

        setTimeout(function () {
            window.location.reload();
        }, 500); 
    }


    function displayOrHideEditForm() {
        if (editForm.style.display == 'none') {
            editForm.style.display = 'block'
        }
        else if (editForm.style.display == 'block') {
            editForm.style.display = 'none'
        }
    }

</script>


    