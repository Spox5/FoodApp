@model IEnumerable<Food.Data.Models.Ingredient>

@{ Layout = "~/Views/Shared/_Layout.cshtml"; }

<div class="main search-meal-container" data-ingredients='@Html.Raw(Json.Serialize(Model))'>

    <div class="title">Co masz w lodówce?</div>

    <div class="ingredients">

        @foreach (var ingredient in Model)
        {
        <label class="btn btn-outline-primary">
            @ingredient.Name <input value="@ingredient.Id" type="checkbox">
        </label>
        }
    <div>
        <button class="search-button btn btn-secondary" type="button">Wyszukaj</button>
    </div>
        
    </div>

    <div class="meal-result-container"></div>

</div>


<script>

    const searchButton = document.querySelector('.search-button');
    const ingredientsContainer = document.querySelector('.ingredients');
    const mealResultContainer = document.querySelector('.meal-result-container');
    const ingredientsData = JSON.parse(document.querySelector('.search-meal-container').dataset.ingredients)

    hideRecipeAtStart()
    bindEvents()

    function bindEvents() {
            searchButton.onclick = () => {
                const ingredients = Array.from(ingredientsContainer.querySelectorAll('input'));
                const selectedIngredients = ingredients
                    .filter(ingredient => ingredient.checked)
                    .map(ingredient => parseInt(ingredient.value))


                mealResultContainer.innerHTML = "";
                mealResultContainer.style.visibility = 'visible';
                getMealsByIngredients(selectedIngredients)
            }
        }


    function displayMealResult(meals) {
        for (const meal of meals) {

            const mealElement = document.createElement('div');
            mealElement.innerHTML = `${meal.name}. Skladniki: ${getMealIngredients(meal)}. Przepis: ${meal.recipe}`;
            mealResultContainer.appendChild(mealElement);
        }
    }


    function getMealsByIngredients(selectedIngredients) {
        const requestData = {
            ingredientIds: selectedIngredients
        }

        fetch("/SearchMeal/Search", {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        })
            .then(response => response.json())
            .then(displayMealResult);
    }


    function getMealIngredients(meal) {
        const ingredients = meal.mealIngredients.map(mi => getIngredientNameById(mi.ingredientId))
        return ingredients.toString()
    }


    function getIngredientNameById(id) {
        return ingredientsData.find(ingredient => ingredient.id === id).name
    }

    function hideRecipeAtStart() {
        mealResultContainer.style.visibility = 'hidden';
    }

</script>